<html><title>ThRepairableObject</title>
<script language="JavaScript">
<!--
function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_findObj(n, d) { //v3.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}
//-->
</script>

<body bgcolor="#000000" background="../Images/blackbackg.JPG" text="#FFFFCC" link="#FF0000" vlink="#FF0000" alink="#FFFFFF" onLoad="MM_preloadImages('../Images/mappingh.gif','../Images/featuresh.gif','../Images/screenshotsh.gif','../Images/linksh.gif','../Images/filesh.gif','../Images/contacth.gif','../Images/guideh.gif','../Images/newsh.gif','../Images/faqh.gif','../Images/jobsh.gif','../Images/forumh.gif')">

<div id="Layer1" style="position:absolute; width:660px; height:39px; z-index:1; left: 23px; top: 0px"><img src="../Images/titlebar.gif" width="709" height="59"></div>
<div id="Layer2" style="position:absolute; width:113px; height:12px; z-index:2; left: 23px; top: 59px"><a href="../Mapping/index.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image1','','../Images/mappingh.gif',1)"><img src="../Images/mapping.gif" width="114" height="19" border="0" name="Image1"></a></div>
<div id="Layer3" style="position:absolute; width:103px; height:8px; z-index:3; left: 137px; top: 59px"><a href="../designdoc.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image2','','../Images/featuresh.gif',1)"><img src="../Images/features.gif" width="119" height="19" border="0" name="Image2"></a></div>
<div id="Layer4" style="position:absolute; width:100px; height:12px; z-index:4; left: 256px; top: 59px"><a href="../screens.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image3','','../Images/screenshotsh.gif',1)"><img src="../Images/screenshots.gif" width="119" height="19" border="0" name="Image3"></a></div>
<div id="Layer5" style="position:absolute; width:88px; height:12px; z-index:5; left: 375px; top: 59px"><a href="../links.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image4','','../Images/linksh.gif',1)"><img src="../Images/links.gif" width="119" height="19" border="0" name="Image4"></a></div>
<div id="Layer6" style="position:absolute; width:76px; height:11px; z-index:6; left: 494px; top: 59px"><a href="../files.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image5','','../Images/filesh.gif',1)"><img src="../Images/files.gif" width="120" height="19" border="0" name="Image5"></a></div>
<div id="Layer7" style="position:absolute; width:96px; height:12px; z-index:7; left: 614px; top: 59px"><a href="../contact.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image6','','../Images/contacth.gif',1)"><img src="../Images/contact.gif" width="118" height="19" border="0" name="Image6"></a></div>
<div id="Layer8" style="position:absolute; width:75px; height:15px; z-index:8; left: 23px; top: 78px"><a href="../Guide/index.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image0','','../Images/guideh.gif',1)"><img src="../Images/guide.gif" width="114" height="21" border="0" name="Image0"></a></div>
<div id="Layer9" style="position:absolute; width:75px; height:15px; z-index:9; left: 137px; top: 78px"><a href="../index.html" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image7','','../Images/newsh.gif',1)"><img src="../Images/news.gif" width="119" height="21" border="0" name="Image7"></a></div>
<div id="Layer10" style="position:absolute; width:94px; height:12px; z-index:10; left: 256px; top: 78px"><a href="../faq.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image8','','../Images/faqh.gif',1)"><img src="../Images/faq.gif" width="119" height="21" border="0" name="Image8"></a></div>
<div id="Layer11" style="position:absolute; width:78px; height:14px; z-index:11; left: 375px; top: 78px"><a href="../jobs.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image9','','../Images/jobsh.gif',1)"><img src="../Images/jobs.gif" width="119" height="21" border="0" name="Image9"></a></div>
<div id="Layer12" style="position:absolute; width:88px; height:12px; z-index:12; left: 494px; top: 78px"><a href="http://www.ttlg.com/forums/forumdisplay.php?s=&forumid=93" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image10','','../Images/forumh.gif',1)"><img src="../Images/forum.gif" width="120" height="21" border="0" name="Image10"></a></div>

<div id="Layer13" style="position:absolute; width:96px; height:12px; z-index:13; left: 614px; top: 78px"><a href="../archive.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Image13','','../Images/archivesh.gif',1)"><img src="../Images/archives.gif" width="118" height="21" border="0" name="Image13"></a></div>
<div id="Layer14" style="position:absolute; width:691px; height:10px; z-index:14; left: 23px; top: 98px"><img src="images/mappingbar.jpg" width="709" height="21"></div>

<div id="NavLayer" style="position:absolute; width:150px; height:160px; z-index:16; left: 735px; top: 130px">
<font size="1" face="Verdana, Arial, Helvetica, sans-serif">
<!--
<a href="index.htm">Mapping</a><p>

<a href="intro.htm">Introduction</a><p>
<a href="ai.htm">AI</a><br>
<a href="custompickups.htm">Custom Pickups</a><br>
<a href="thdoor.htm">Doors</a><br>
<a href="ladder.htm">Ladders</a><br>
<a href="lighting.htm">Lighting 1</a><br>
<a href="lighting2.htm">Lighting 2</a><br>
<a href="lighting3.htm">Lighting 3</a><br>
<a href="loot.htm">Loot</a><br>
<a href="objectives.htm">Objectives</a><br>
<a href="sketch.htm">Sketch maps</a><br>
<a href="thieverygamesettings.htm">ThieveryGameSettings</a><br> -->

<iframe width=150 height=600 src="nav.htm" frameborder=0 scrolling=no> </iframe>
              

</div>

<div id="Layer15" style="position:absolute; width:695px; height:115; z-index:15; left: 31px; top: 124px">



<font size="2" face="Verdana, Arial, Helvetica, sans-serif" color="#FFFFCC">

<font size="4" face="Verdana, Arial, Helvetica, sans-serif">
ThRepairableObject<br>
</font>
<font size="1" face="Verdana, Arial, Helvetica, sans-serif" color="#FF9933">
v1.1 - 15th Feb 2003 - The_Dan<p>
</font>
<b><a name="Top">Contents:</a></b>
<br><a href=#Link0 target="_self">Introduction</a>
<br><a href=#Link3 target="_self">Making a standard ThRepairableObject</a>
<br><a href=#Link4 target="_self">Events & Making you ThRepairableObject actually do something</a>
<br><a href=#Link5 target="_self">TUTORIAL: Creating a damageable light source</a>
<br><a href=#Link6 target="_self">Changing Damage Effects</a>
<br><a href=#Link7 target="_self">Optional Properties</a>

<p><a name="Link0">ThRepairableObject</a> is a small user-made (the user being me, Dan) extension to Thievery that allows mappers to create ThieveryObjects that can be temporarily destroyed & repaired in the same style as the supply chest. Whats more, various events can be attached to the different states of the object & so it can be used to affect other actors & create more complex effects.
<p>It as assumed that you know the basics behind properties, triggers & effects. If not, you would be advised not to attempt anything too complex early on.
<p><a href=#Top target="_self">Back to Top</a>
<p><a name="Link3"><h3>Making a standard ThRepairableObject:</h3></a>
The class can be found at Actor>Decoration>ThieveryObject>ThRepairableObjectBase>ThRepairableObject (you will have to load the TDRepairable.u package first). Simply place one of these in your level & I will guide you through setting it up:
<ol>
<li>The default mesh for ThRepairableObject is that of a Thievery light fixture. To change this to a different one, just change the Display>Mesh property of the object. To change the size of the object, change the Display>DrawScale property.
<p>
<li>The default collision cylinder used is for the default mesh, & so it will have to be adjusted to represent the chosen mesh. I suggest turning on the radius-view in UED, & using this to judge what makes the most accurate cylinder. Having an accurate cylinder is especially important since this will determine how accurate weapons have tobe, in order to cause damage.
<p>
<li>Open up the properties tree of you object & expand the branch  entitled ThRepairableObject. This contains the important basic properties of ThRepairableObject, as explained below:<ul>
<p><li><b>bThievesCanDamage</b>: Can thieves damage this object?<br>
It would be rare that you would have to set this to false, although it depends purely on the circumstances.
<p><li><b>bGuardsCanDamage</b>: Can guards damage this object?<br>
Consider carefully what this object is going to affect; thieves are unable to repair anything & so if guards can gain any sort of benefit from destroying this, then they may be temptped to destroy this staright away.
<p><li><b>binitiallyBroken</b>: Is the object broken when the level starts?<br>
Remember to take this into account when setting up options related to this object; eg. if a light is going to be initially broken, then the triggerlight must be initially switched off.
<p><li><b>bDamageWhenBroken</b>: Will the object still trigger damage subroutines if it receives damge when it is already broken?<br>
OK, not the most obvious one but if the object has been broken, do you still want it to give off a damage-effect & send off a DamegeEvent? You'll see more about this later.
<p><li><b>DefaultHealth</b>: The initial health value of the object.<br>
The object will receive this much health whenever it is repaired & will start with this amount of health, at the start of the level, if bInitiallyBroken is false
<p><li><b>RepairTime</b>: How many seconds of use with the repair kit does it take for this object to be repaired?<br>
Self-explanitory. Bare in mind that if someone starts repairing the object & then leaves part-way, they WILL NOT have to start from the beginning again. This value represents the TOTAL amount of repair needed.
<p><li><b>SyncTag</b>: Set to the same SyncTag as any other ThRepairableObjects that should "stay in sync" with this one<br>
Hmm, confused? You should be. See it this way:
<br>If you have two ThRepairableObjects with the same SyncTag:
<br>--When one gets destroyed, they are both destroyed
<br>--When one is repaired, they are both repaired
<br>You'll see a use for this later
</ul>
<p><li>Thats it! The entire set-up of ThRepairableObject is chosen through its properties. 
</ol>

<p><a href=#Top target="_self">Back to Top</a>
<p><a name="Link4"><h3>Events & Making your ThRepairableObject actually do something:</h3></a>
OK, so that was the basics. Using the above information, you should now be able to create an custom object that can be broken & repaired. However it won't do much beyond getting broken & repaired. For it to affect the outside world, you will need to enter some names into the ThROEvents property branch of your object.

I'm assuming you know about events & triggers; basically, there are 6 different events that can be triggered by a ThRepairableObject & by filling in the appropriate properties you can define specific actors to be triggered by these events:<ul><p>
<li><b>DamageEvent</b>: This is triggered when the object receives damage
<p><li><b>BrokenEvent</b>: This is triggered when the object is broken (health = 0)
<p><li><b>RepairEvent</b>: This is triggered when the object is repaired fully
<p><li><b>FrobEvent</b>: This is triggered when a player attempts to frob the object, AND the object isn't currently broken
<p><li><b>TriggerEvent</b>: This is triggered when the object itself is triggered (ie. another object triggers an event matching the tag of your ThRepairableObject) AND the object isn't currently broken.
<p><li><b>TimerBrokenEvent</b>: This is triggered when the object has been broken for a specific amount of time (defined by the TimerBrokenTime variable). By setting the bTimerBrokenLoop variable to true, you have this event triggered every x seconds that the object is broken (where x = TimerBrokenTime)
</ul>
Now, plain English never was my best area & so I'll give an example of how the events are used.

<p><a href=#Top target="_self">Back to Top</a>
<p><a name="Link5"><h3>TUTORIAL: Creating a damageable light source:</h3></a>

In this tutorial we will be creating a light fixture that normally emits light, but can be damaged to remove the light source & repaired to re-activate the light.

(At this point it helps if you have a sample level to work with. If this isn't the case then just use a copy of any of the standard Thievery levels, but be sure NOT to overwrite the original map)
<ol>
<li>Find a decoration-free spot of wall & add a ThRepairableObject to it. Note: ThRepairableObject is set up to represent a light source, by default.

<li>Rotate the object so that is correctly placed against the wall & adjust the position so that it about waist-height.

<li>Now add a Actor>Light>TriggerLight near to the ThRepairableObject. & move it in the 2D views so that is in about the same central position as the ThRepairableObject.

<li>Set the following properties of the TriggerLight:
TriggerLight>bInitiallyOn = True
Object>Initialstate = TriggerToggle

<li>TriggerLights have the default tag of "TriggerLight" which will be fine for this tutorial. We want the light to be toggled by the object being broken & repaired: Therefore, set BrokenEvent & RepairEvent to both equal "TriggerLight".

<li>Set bGuardsCanDamage to true. This isn't necessary, but will allow us to view the object changing as it is repaired & broken.

<li>Thats it, all set up! Rebuild lighting & start up your level.
<p>
</ol>
Choose guard & buy a sword & a repair kit. Find your light, & watch it go off & on when you destroy & repair it, respectively.

<p>Note:By changing the ThROOptional>ScaleGlowFunctional & ThROOptional>ScaleGlowBroken properties on your object, you can get it's ScaleGlow to change to specific values when it broken or functional.


<p><a href=#Top target="_self">Back to Top</a>
<p><a name="Link6"><h3>Changing Damage Effects:</h3></a>
I've included the support for customisable effects to be triggered when the object is three key-states of damage:
<ul>
<li><b>DamageEffect</b>: The object has just received damage
<p><li><b>BrokenEffect</b>: The object has just been broken
<p><li><b>TimerBrokenEffect</b>: The object has been broken for x seconds
(where in this case x = TimerBrokenEffectTime)
</ul>
The effects generated at these instances can be decided in the ThRODamageEffects branch of the property tree, out of a choice of 5 possible effects:
<ul>
<li><b>DE_None</b>: No effect, nothing happens
<p><li><b>DE_Spark</b>: The object releases a burst of sparks (in the same style as watcher sparks)
<p><li><b>DE_Smoke</b>: A small cloud of smoke drifts up from the object
<p><li><b>DE_Explosion</b>: A small explosion occurs at the object
<p><li><b>DE_Custom</b>: A custom effect is generated depending upon the value of the corresponding Custom???Effect property
</ul>
I don't think this needs much more explanation, & so I would suggest that you just experiment to get the idea of how the damage effects work.

<p><a href=#Top target="_self">Back to Top</a>
<p><a name="Link7"><h3>Optional Properties:</h3></a>
<p>Lastly, there are several properties under ThROOptional that have no bearing on the actual functioning of ThRepairableObject & are purely included to enhance the visual/sound effects of the object:

<p>Lighting-based:<ul>
<li><b>bFunctionalUnlit</b>: When this is true, the object will be Unlit when in one piece & normally lit when broken.
<li><b>ScaleGlowFunctional</b> & </b>ScaleGlowBroken</b>: These respectively decide the scaleglow of the object when it is either functional or broken.
</ul>
<p>HUD Names:
<br>In the game, when you centre the crosshair on the object, you will see a name appear in the top-right-hand corner of the screen. This name will be <b>RepairedName</b> or <b>BrokenName</b> depending on whether the object is respectively in one piece or broken.

<p>Sounds:<ul>
<li><b>FailedFrobsound</b>: Played from the object when a player attempted to frob it, but it is currently broken. Note: If a player tries to frob it, & it isn't broken, ThieveryObject>Frobsound will be played.
<li><b>DamageSound</b>: Played from the object when it receives damage. By default  this is set to the same sound played by the supply chest when it receives damage.
<li><b>BrokenSound</b>: Played when the object is broken.
</ul>
<p>& lastly...<ul>
<li><b>FailedFrobMsg</b>: This is a small string message that will be displayed in the chat area (on the frobbers' screen only) when a player attempts to frob the object, but it is currently broken
</ul>
<p><a href=#Top target="_self">Back to Top</a>
<p>

<center><img src="images/rune.gif"></center><p>

</body>
</html>